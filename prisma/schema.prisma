// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String  @unique
  type              String
  access_token      String?  
  expires_at        Int?     
  refresh_token     String?  
  scope             String?  
  token_type        String?  
  id_token          String?  

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String  @id @default(uuid())
  email           String  @unique
  password        String?
  name            String  @unique
  realName        String?
  hashtag         String? 
  avatarPhoto     String?
  posts           Post[]  
  comments        Comment[]
  aboutMe         String?
  selectedTags    UserTag[] @relation("UserSelectedTags")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastSeenAt      DateTime?
  hasCompletedSetup Boolean @default(false)

  accounts        Account[]
  sessions        Session[]

  following       Follows[] @relation("Following")
  followers       Follows[] @relation("Followers")

  visitedProfiles RecentlyVisitedUsers[] @relation("Visitor")
  visitedBy       RecentlyVisitedUsers[] @relation("Visited")

  @@unique([name, hashtag])
  SuggestedTags SuggestedTags[]
  PostReactions PostReactions[]
  CommentReaction CommentReaction[]

  sentContacts     Contact[]  @relation("SentContacts")
  receivedContacts Contact[]  @relation("ReceivedContacts")
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  Collection Collection[]
}

enum ContactStatus {
  pending
  accepted
}

model Contact {
  id         String         @id @default(cuid())
  sender     User           @relation("SentContacts", fields: [senderId], references: [id])
  senderId   String
  receiver   User           @relation("ReceivedContacts", fields: [receiverId], references: [id])
  receiverId String
  status     ContactStatus  @default(pending)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([senderId, receiverId])
}

model Message {
  id          String   @id @default(cuid())
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId  String
  content     String
  createdAt   DateTime @default(now())
  viewedAt    DateTime?
}

model Follows {
  followerId  String
  followingId String

  follower  User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([followerId, followingId])
}

model Post {
  id        String    @id @default(uuid())
  title     String
  imageUrl  String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comments  Comment[]
  tags      PostTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  reactions   PostReactions[]
  collections Collection[] @relation("PostInCollection")

  @@index([createdAt])
}

model PostReactions {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  reaction  String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Tag {
  id        String @id @default(uuid())
  name      String @unique
  userTags  UserTag[]
  postTags  PostTag[]

  SuggestedTags SuggestedTags[]

  CollectionTag CollectionTag[]
}

model Comment {
  id        String  @id @default(uuid())
  content   String
  likes     Int     @default(0)
  dislikes  Int     @default(0)
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CommentReaction CommentReaction[]
}

model CommentReaction {
  id         String   @id @default(uuid())
  userId     String
  commentId  String
  reaction   String   // like or dislike
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}


model UserTag {
  userId String
  tagId  String

  user User @relation("UserSelectedTags", fields: [userId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([userId, tagId])
}

model PostTag {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model SuggestedTags {
  id          String   @id @default(uuid())
  userId      String
  tagId       String
  count       Float    @default(0)

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([userId, tagId])
}

model RecentlyVisitedUsers {
  id          String   @id @default(uuid())
  visitorId   String
  visitedId   String
  visitedAt   DateTime @default(now())

  visitor     User     @relation("Visitor", fields: [visitorId], references: [id], onDelete: Cascade)
  visited     User     @relation("Visited", fields: [visitedId], references: [id], onDelete: Cascade)

  @@index([visitorId, visitedAt])
  @@index([visitedId, visitedAt])
}

model Collection {
  id              String   @id @default(cuid())
  name            String
  previewImageUrl String?
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  posts           Post[]   @relation("PostInCollection")
  createdAt       DateTime @default(now())
  hideTagWarning Boolean @default(false)
  collectionTags  CollectionTag[]
}

model CollectionTag {
  collectionId String
  tagId        String

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  tag        Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([collectionId, tagId])
  @@index([tagId])
}
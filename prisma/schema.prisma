// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String  @unique
  type              String
  access_token      String?  
  expires_at        Int?     
  refresh_token     String?  
  scope             String?  
  token_type        String?  
  id_token          String?  

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String  @id @default(uuid())
  email           String  @unique
  password        String?
  name            String  @unique
  hashtag         String? 
  backgroundPhoto String? // Remove later
  avatarPhoto     String?
  posts           Post[]  
  comments        Comment[]
  aboutMe         String?
  tags            UserTag[]
  customSections  CustomSection[] // Remove later
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastActive      DateTime @default(now())

  accounts        Account[]
  sessions        Session[]

  following       Follows[] @relation("Following")
  followers       Follows[] @relation("Followers")
  
  @@unique([name, hashtag])
}


model Follows {
  followerId String
  followingId String

  follower User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([followerId, followingId])
}

model CustomSection { // Remove later
  id        String   @id @default(uuid())
  userId    String
  icon      String   
  title     String   
  content   String   
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model Post {
  id        String    @id @default(uuid())
  title     String
  imageUrl  String
  likes     Int       @default(0)
  dislikes  Int       @default(0)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comments  Comment[]
  tags      PostTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Tag {
  id        String @id @default(uuid())
  name      String @unique
  userTags  UserTag[]
  postTags  PostTag[]
}

model Comment {
  id        String  @id @default(uuid())
  content   String
  likes     Int     @default(0)
  dislikes  Int     @default(0)
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTag {
  userId String
  tagId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([userId, tagId])
}

model PostTag {
  postId String
  tagId String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}
